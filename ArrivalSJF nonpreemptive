#include<stdio.h>

void main() {
    int at[20], bt[20], pid[20], tat[20], wt[20], ct[20];
    int n, i, j, temp, completed = 0, cur_time = 0, min_index;
    float wtavg = 0, tatavg = 0;
    int is_completed[20] = {0};

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Assign Process IDs
    for(i = 0; i < n; i++) {
        pid[i] = i + 1;
    }

    printf("Enter the arrival times:\n");
    for(i = 0; i < n; i++) {
        printf("P%d: ", i + 1);
        scanf("%d", &at[i]);
    }

    printf("Enter the burst times:\n");
    for(i = 0; i < n; i++) {
        printf("P%d: ", i + 1);
        scanf("%d", &bt[i]);
    }

    while (completed < n) {
        int min_bt = 9999;
        min_index = -1;

        // Find the shortest job that has arrived and not completed
        for (i = 0; i < n; i++) {
            if (at[i] <= cur_time && is_completed[i] == 0) {
                if (bt[i] < min_bt) {
                    min_bt = bt[i];
                    min_index = i;
                }
                // If two have same burst time, choose one with earlier arrival
                else if (bt[i] == min_bt) {
                    if (at[i] < at[min_index]) {
                        min_index = i;
                    }
                }
            }
        }

        if (min_index == -1) {
            // No process is ready, advance time
            cur_time++;
        } else {
            wt[min_index] = cur_time - at[min_index];
            if (wt[min_index] < 0) wt[min_index] = 0;

            ct[min_index] = cur_time + bt[min_index];
            tat[min_index] = ct[min_index] - at[min_index];

            wtavg += wt[min_index];
            tatavg += tat[min_index];

            cur_time = ct[min_index];
            is_completed[min_index] = 1;
            completed++;
        }
    }

    // Output
    printf("\nPROCESS  ARRIVAL BURST  WAITING TURNAROUND");
    for (i = 0; i < n; i++) {
        printf("\nP%d       %d       %d      %d        %d", pid[i], at[i], bt[i], wt[i], tat[i]);
    }

    wtavg /= n;
    tatavg /= n;
    printf("\nAverage Waiting Time: %.2f", wtavg);
    printf("\nAverage Turnaround Time: %.2f\n", tatavg);
}
