#include <stdio.h>
#define MAX 100

void fifo(int pages[], int n, int frames) {
    int f[frames], i, j = 0, hits = 0, faults = 0;
    for (i = 0; i < frames; i++) f[i] = -1;

    for (i = 0; i < n; i++) {
        int found = 0;
        for (int k = 0; k < frames; k++)
            if (f[k] == pages[i]) { found = 1; hits++; break; }

        if (!found) {
            f[j] = pages[i];
            j = (j + 1) % frames;
            faults++;
        }
    }
    printf("FIFO - Hits: %d, Faults: %d\n", hits, faults);
}

void lru(int pages[], int n, int frames) {
    int f[frames], time[frames], i, hits = 0, faults = 0, t = 0;
    for (i = 0; i < frames; i++) f[i] = -1;

    for (i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frames; j++) {
            if (f[j] == pages[i]) {
                found = 1; hits++; time[j] = t++;
                break;
            }
        }
        if (!found) {
            int min = 0;
            for (int j = 1; j < frames; j++)
                if (f[j] == -1 || time[j] < time[min]) min = j;

            f[min] = pages[i]; time[min] = t++; faults++;
        }
    }
    printf("LRU  - Hits: %d, Faults: %d\n", hits, faults);
}

void optimal(int pages[], int n, int frames) {
    int f[frames], i, hits = 0, faults = 0;
    for (i = 0; i < frames; i++) f[i] = -1;

    for (i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frames; j++)
            if (f[j] == pages[i]) { found = 1; hits++; break; }

        if (!found) {
            int farthest = -1, idx = -1;
            for (int j = 0; j < frames; j++) {
                int k;
                for (k = i + 1; k < n; k++)
                    if (f[j] == pages[k]) break;

                if (k > farthest) { farthest = k; idx = j; }
                if (k == n) { idx = j; break; }
            }
            if (idx == -1) idx = 0;
            f[idx] = pages[i]; faults++;
        }
    }
    printf("OPT  - Hits: %d, Faults: %d\n", hits, faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};
    int n = sizeof(pages)/sizeof(pages[0]);
    int frames = 3;

    fifo(pages, n, frames);
    lru(pages, n, frames);
    optimal(pages, n, frames);
    return 0;
}
