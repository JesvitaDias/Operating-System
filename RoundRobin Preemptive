#include <stdio.h>

void main() {
    int at[20], bt[20], rem_bt[20], ct[20], wt[20], tat[20], pid[20];
    int n, i, time = 0, completed = 0, tq, queue[100], front = 0, rear = 0, visited[20] = {0};
    float wtavg = 0, tatavg = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for(i = 0; i < n; i++) {
        pid[i] = i + 1;
    }

    printf("Enter arrival times:\n");
    for(i = 0; i < n; i++) {
        printf("P%d: ", i + 1);
        scanf("%d", &at[i]);
    }

    printf("Enter burst times:\n");
    for(i = 0; i < n; i++) {
        printf("P%d: ", i + 1);
        scanf("%d", &bt[i]);
        rem_bt[i] = bt[i]; // initialize remaining burst times
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &tq);

    // Enqueue first arrived process
    for (i = 0; i < n; i++) {
        if (at[i] == time) {
            queue[rear++] = i;
            visited[i] = 1;
        }
    }

    while (completed < n) {
        if (front == rear) {
            time++;
            for (i = 0; i < n; i++) {
                if (at[i] == time && !visited[i]) {
                    queue[rear++] = i;
                    visited[i] = 1;
                }
            }
            continue;
        }

        int idx = queue[front++];  // Dequeue

        if (rem_bt[idx] > tq) {
            rem_bt[idx] -= tq;
            time += tq;
        } else {
            time += rem_bt[idx];
            rem_bt[idx] = 0;
            ct[idx] = time;
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];
            wtavg += wt[idx];
            tatavg += tat[idx];
            completed++;
        }

        // Enqueue new arrivals that came during execution
        for (i = 0; i < n; i++) {
            if (at[i] <= time && !visited[i] && rem_bt[i] > 0) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

        // If current process still has burst time left, re-enqueue
        if (rem_bt[idx] > 0) {
            queue[rear++] = idx;
        }
    }

    // Output
    printf("\nPROCESS  ARRIVAL  BURST  COMPLETION  WAITING  TURNAROUND\n");
    for(i = 0; i < n; i++) {
        printf("P%-3d     %-7d %-6d %-10d %-8d %-10d\n", pid[i], at[i], bt[i], ct[i], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f", wtavg / n);
    printf("\nAverage Turnaround Time: %.2f\n", tatavg / n);
}
